# copy and symlink config files
cd ~/nix
sudo cp flake.nix flake.lock nixos.nix sway-fixes.nix /etc/nixos

mkdir -p ~/.config/home-manager
ln -sf flake.nix ~/.config/home-manager

# install everything!
sudo nixos-rebuild switch --flake /etc/nixos#map-work
home-manager switch

# TODO: set firefox configs elsewhere
# in firefox, 'about:config':
# browser.quitShortcut.disabled: set to true to disable exiting with ctrl+q
# browser.low_commit_space_threshold_percent: set to (say) 30 to decrease memory usage
# permissions.default.shortcuts: set to 2 to disable websites capturing keyboard shortcuts

# to remove close/minimize buttons from firefox windows:
# toolkit.legacyUserProfileCustomizations.stylesheets: set to true
# make sure that the directory of dotfiles/firefox_userChrome.css in files.nix agrees with the profile directory firefox lists in about:support
# see https://www.reddit.com/r/FirefoxCSS/wiki/index/tutorials/

# in chromium, chrome://flags
# enable WebRTC PipeWire support

##################################################
# conda / python

conda-shell
conda-install
conda update conda python

# disable pip installing in the base environment
pip uninstall pip

# for jupyter notebooks (in an environment):
pip install jupyter ipykernel

# creating and deleting environments
conda create --name <VENV-NAME> python=3.<VERSION>
conda env remove --name <VENV-NAME>

# WARNING: some package installations may fail due to dependencies external to python.
# In this case, these packages should be installed after calling 'conda-shell'.

# Some standard packages/libraries can be installed with
conda install -c conda-forge <PACKAGE>

# To enable activating virtual environments, call 'conda init',
#   which requires '~/."$SHELL"rc' to be writable.
# In practice, I prefer inspecting how 'conda init' modifies '~/."$SHELL"rc'
#   and enabling virtual environments 'manually'.

##################################################
# julia

# add julia kernel for Jupyter notebooks:
julia -e 'import Pkg; Pkg.add("IJulia")'

# julia formatter:
julia -e 'import Pkg; Pkg.add("JuliaFormatter")'

# activate julia environment:
import Pkg; Pkg.activate("MyEnvironment")
