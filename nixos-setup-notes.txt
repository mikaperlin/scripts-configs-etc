# add package channels
sudo nix-channel --add https://nixos.org/channels/nixos-23.05 nixos
sudo nix-channel --add https://nixos.org/channels/nixos-unstable nixos-unstable
sudo nix-channel --add https://github.com/NixOS/nixos-hardware/archive/master.tar.gz nixos-hardware
sudo nix-channel --add https://github.com/nix-community/home-manager/archive/release-23.05.tar.gz home-manager
sudo nix-channel --update

# as user (no sudo/root)
nix-channel --add https://github.com/nix-community/home-manager/archive/release-23.05.tar.gz home-manager
nix-channel --update

# copy over main config files
sudo cp ~/nix/configuration.nix /etc/nixos
sudo cp ~/nix/sway-fixes.nix /etc/nixos
mkdir -p ~/.config/home-manager
ln -s ~/nix/home.nix ~/.config/home-manager/home.nix

# set up nixos!
sudo nixos-rebuild switch

# note: it *may* be necessary to run
# nix-shell '<home-manager>' -A install

# TODO: set firefox configs elsewhere
# in firefox, 'about:config':
# browser.quitShortcut.disabled: set to true to disable exiting with ctrl+q
# browser.low_commit_space_threshold_percent: set to (say) 30 to decrease memory usage

# to remove close/minimize buttons from firefox windows:
# toolkit.legacyUserProfileCustomizations.stylesheets: set to true
# make sure that the directory of dotfiles/firefox_userChrome.css in files.nix agrees with the profile directory firefox lists in about:support
# see https://www.reddit.com/r/FirefoxCSS/wiki/index/tutorials/


# in google-chrome, chrome://flags
# enable WebRTC PipeWire support

##################################################
# conda / python

conda-shell
conda-install
conda update conda
conda install python=3.10

# to set up a virual environment:
conda create --name <VENV-NAME> python=3.<VERSION>

# to delete a virtual environment:
conda env remove --name <VENV-NAME>

# for jupyter notebooks:
conda install jupyter ipykernel
conda install -c conda-forge jupyterlab nb_conda_kernels
conda install -c conda-forge jupyter_contrib_nbextensions  # might not work?

# NOTE: 'jupyter notebook' must be executed OUTSIDE virtual environments
#       venvs in notebooks are controlled by the choice of kernel

# WARNING: some package installations may fail due to dependencies external to python.
# In this case, these packages should be installed after calling 'conda-shell'.

# To enable activating virtual environments, call 'conda init',
#   which requires '~/."$SHELL"rc' to be writable.
# In practice, I prefer inspecting how 'conda init' modifies '~/."$SHELL"rc'
#   and enabling virtual environments 'manually'.

# Some standard packages/libraries can be installed with
conda install -c conda-forge <PACKAGE>
